To insert new contents in the Android resources, you need to modify the respective files in the "res" directory of your Android project. Here are the steps to do so:

Color: Open the "colors.xml" file in the "values" directory and add a new color resource. For example, to add a new color named "myColor", add the following line:
xml
<color name="myColor">#FF0000</color>
You can then use this color in your layout XML or code by referencing its name: @color/myColor

Theme: Open the "styles.xml" file in the "values" directory and add a new style resource. For example, to add a new style named "myStyle", add the following lines:
xml
<style name="myStyle" parent="Theme.AppCompat.Light">
    <!-- Customize your theme here. -->
</style>
You can then apply this style to your activities or application by setting the android:theme attribute in your manifest or activity XML to @style/myStyle.

String: Open the "strings.xml" file in the "values" directory and add a new string resource. For example, to add a new string named "myString", add the following line:
xml
<string name="myString">Hello World!</string>
You can then use this string in your layout XML or code by referencing its name: @string/myString

Drawable: Open the "drawable" directory and add a new drawable resource file. For example, to add a new drawable named "myDrawable", create a new file called "my_drawable.xml" and add the following lines:
xml
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="@color/myColor" />
    <corners android:radius="8dp" />
</shape>
You can then use this drawable in your layout XML or code by referencing its name: @drawable/myDrawable

Dimension: Open the "dimens.xml" file in the "values" directory and add a new dimension resource. For example, to add a new dimension named "myDimension", add the following line:
xml
<dimen name="myDimension">16dp</dimen>
You can then use this dimension in your layout XML or code by referencing its name: @dimen/myDimension

Image: Add your image file to the "drawable" directory. You can then use this image in your layout XML or code by referencing its file name: @drawable/myImage
After adding these resources, you can use them in your application's layout XML files or in your Kotlin code. For example, to use a color resource in your layout XML, you can use the following code:

xml
<Button
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:textColor="@color/myColor"
    android:text="@string/myString" />



xml<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity"
    android:background="@color/black"
    android:theme="@style/Theme.Trying"
    android:orientation="vertical">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Welcome to my program"
        android:id="@+id/test1"
        android:textSize="25sp"
        android:textColor="@color/grey"/>
    <ImageView
        android:layout_width="match_parent"
        android:layout_height="400dp"
        android:id="@+id/image1"
        android:src="@drawable/goku"/>
    <Button
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:id="@+id/button1"
        android:textColor="@color/purple_200"
        android:text="Hit Me"/>

</LinearLayout>

kt
package com.example.myapplicationresources

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView


class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val image1 = findViewById<ImageView>(R.id.image1)
        val button1 = findViewById<Button>(R.id.button1)

        button1.setOnClickListener { image1.setImageResource(R.drawable.gokus) }
        }
    }

colors.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="grey">#808080</color>
</resources>

Thems.xml
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Theme.MyApplicationResources" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
        <!-- Primary brand color. -->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorOnPrimary">@color/white</item>
        <!-- Secondary brand color. -->
        <item name="colorSecondary">@color/teal_200</item>
        <item name="colorSecondaryVariant">@color/teal_700</item>
        <item name="colorOnSecondary">@color/black</item>
        <!-- Status bar color. -->
        <item name="android:statusBarColor">?attr/colorPrimaryVariant</item>
        <!-- Customize your theme here. -->
    </style>
    <style name="Theme.Trying" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <item name="colorPrimary">@color/black</item>
        <item name="colorPrimaryVariant">@color/white</item>
        <item name="colorOnPrimary">@color/white</item>
        <item name="colorSecondary">@color/teal_200</item>
        <item name="colorSecondaryVariant">@color/teal_700</item>
        <item name="colorOnSecondary">@color/black</item>
        <item name="android:statusBarColor" tools:targetApi="l">?attr/colorPrimaryVariant</item>
    </style>
</resources>








